#include "EnemyMoveLeftRight.h"
#include <DxLib.h>
#include "../Util/DrawFunctions.h"
#include "../Game/HpBar.h"

namespace
{
	constexpr int kLeftRightTouchAttackPower = 4;//接触した時の攻撃力

	constexpr int anim_frame_speed = 5;//一枚に必要なフレーム数
	constexpr int anim_frame_num = 3;//アニメーション枚数

	constexpr int kLeftRightSize = 32;//グラフィック1つの大きさ
	constexpr float kDrawScall = 1.0f;//グラフィック拡大率

	constexpr float kEnemyMoveSpeed = 4.0f;//エネミーの移動速度

	constexpr int burst_img_width = 32;//画像サイズX
	constexpr int burst_img_height = 32;//画像サイズY
	constexpr float burst_draw_scale = 1.0f;//拡大率
	constexpr int burst_frame_num = 8;//アニメーション枚数
	constexpr int burst_frame_speed = 5;//アニメーションスピード
}

EnemyMoveLeftRight::EnemyMoveLeftRight(std::shared_ptr<Player> player, const Position2 pos, int handle, int burstH, std::shared_ptr<ShotFactory> sFactory) :
	EnemyBase(player, pos, sFactory), m_updateFunc(&EnemyMoveLeftRight::NormalUpdate),m_drawFunc(&EnemyMoveLeftRight::NormalDraw)
{
	m_handle = handle;
	m_burstHandle = burstH;
	m_rect = { pos,{kLeftRightSize,kLeftRightSize} };
	m_hp->MaxHp(3);
}

EnemyMoveLeftRight::~EnemyMoveLeftRight()
{

}

void EnemyMoveLeftRight::Update()
{
	if (!m_isExist)	return;
	
	(this->*m_updateFunc)();
}

void EnemyMoveLeftRight::Draw()
{
	(this->*m_drawFunc)();
}

void EnemyMoveLeftRight::Movement(Vector2 vec)
{
	if (!m_isExist)	return;

	m_rect.center += vec;
}

int EnemyMoveLeftRight::TouchAttackPower() const
{
	return kLeftRightTouchAttackPower;
}

void EnemyMoveLeftRight::Damage(int damage)
{
	m_hp->Damage(damage);
	//m_ultimateTimer = kUltimateFrame;//無敵時間
	if (m_hp->GetHp() == 0)
	{
		m_updateFunc = &EnemyMoveLeftRight::BurstUpdate;
		m_drawFunc = &EnemyMoveLeftRight::BurstDraw;
		m_idx = 0;
	}
}

bool EnemyMoveLeftRight::IsCollidable() const
{
	return (m_updateFunc != &EnemyMoveLeftRight::BurstUpdate);
}

void EnemyMoveLeftRight::NormalUpdate()
{
	//2秒間ぐらい止まる
	if (m_frame++ >= 120)
	{
		//半目
		m_idx = 1;
		//フレームカウントをゼロにする
		m_frame = 0;
		//どっちを向いているかどうか
		if (m_isLeft)
		{
			m_updateFunc = &EnemyMoveLeftRight::LeftUpdate;
		}
		else
		{
			m_updateFunc = &EnemyMoveLeftRight::RightUpdate;
		}
	}
	//止まっている間は目を閉じた画像を表示させる
	else
	{
		m_idx = 0;
	}
}

void EnemyMoveLeftRight::LeftUpdate()
{
	//目が開いている画像
	m_idx = 2;
	//左に移動する
	m_rect.center.x -= kEnemyMoveSpeed;
	//壁にぶつかった時
	if (m_chipId == 1)
	{
		//半目
		m_idx = 1;
		//向きを逆に
		m_isLeft = false;
		//通常の更新に切り替える
		m_updateFunc = &EnemyMoveLeftRight::NormalUpdate;
	}
}

void EnemyMoveLeftRight::RightUpdate()
{
	m_idx = 2;
	//右に移動
	m_rect.center.x += kEnemyMoveSpeed;
	if (m_chipId == 1)
	{
		m_idx = 1;
		m_isLeft = true;
		m_updateFunc = &EnemyMoveLeftRight::NormalUpdate;
	}
}

void EnemyMoveLeftRight::NormalDraw()
{
	if (!m_isExist)	return;
	int img = m_idx * kLeftRightSize;
	my::MyDrawRectRotaGraph(static_cast<int>(m_rect.center.x), static_cast<int>(m_rect.center.y),
		img, 0, kLeftRightSize, kLeftRightSize, kDrawScall, 0.0f, m_handle, true, m_isLeft);
#ifdef _DEBUG
	m_rect.Draw(0xff00ff);
#endif
}

void EnemyMoveLeftRight::BurstUpdate()
{
	m_idx++;
	if (m_idx == burst_frame_num * burst_frame_speed)
	{
		m_isExist = false;
	}
}

void EnemyMoveLeftRight::BurstDraw()
{
	int imgX = (m_idx / burst_frame_speed) * burst_img_width;
	my::MyDrawRectRotaGraph(static_cast<int>(m_rect.center.x), static_cast<int>(m_rect.center.y),
		imgX, 0, burst_img_width, burst_img_height, burst_draw_scale, 0.0f, m_burstHandle, true, false);
}
